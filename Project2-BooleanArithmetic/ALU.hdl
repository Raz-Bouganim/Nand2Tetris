// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=x , b[0..15]=false , sel=zx , out=tempzx ); //check if zero x
    Not16(in=tempzx , out=notx );
    Mux16(a=tempzx , b=notx , sel=nx , out=tempnx ); //check if negative x

    Mux16(a=y , b[0..15]=false , sel=zy , out=tempzy ); //check if zero y
    Not16(in=tempzy , out=noty );
    Mux16(a=tempzy , b=noty , sel=ny , out=tempny ); //check if negative y

    Add16(a =tempnx , b =tempny , out =xplusy ); // x+y
    And16(a=tempnx , b=tempny , out=xandy ); // x&y
    Mux16(a=xandy , b=xplusy , sel=f , out=tempfxy ); //check if f is true or false
    
    Not16(in=tempfxy , out=tempnfxy ); //not fxy
    Mux16(a=tempfxy , b=tempnfxy , sel=no , out=tempout ); //check if no is true or false
    Mux16(a=tempfxy , b=tempnfxy , sel=no , out[0..7]=tempout1 , out[8..15]=tempout2 ); //seperate tempout into 2 different ones in order to use or8way chip

    Or8Way(in=tempout1 , out=zr1 ); //check if the first 8 bits contains 1
    Or8Way(in=tempout2 , out=zr2 ); //check if the second 8 bits contains 1
    Or(a=zr1 , b=zr2 , out=zr3 ); //check if on of the halfs contains 1
    Not(in=zr3 , out=zr ); //switches zr

    Or16(a=tempout , b[0..15]=false , out[15]=ng, out[0..14]=notRelevant ); //ng
    Or16(a=tempout , b[0..15]=false , out=out ); //out
}